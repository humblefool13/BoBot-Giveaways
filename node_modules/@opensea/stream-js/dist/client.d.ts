import { ClientConfig, BaseStreamMessage, EventType, ItemMetadataUpdate, ItemListedEvent, ItemSoldEvent, ItemTransferredEvent, ItemReceivedBidEvent, ItemReceivedOfferEvent, ItemCancelledEvent, Callback } from './types';
export declare class OpenSeaStreamClient {
    private socket;
    private channels;
    private logLevel;
    constructor({ network, token, apiUrl, connectOptions, logLevel, onError }: ClientConfig);
    private debug;
    private info;
    private warn;
    private error;
    connect: () => void;
    disconnect: (callback?: () => void) => void;
    private createChannel;
    private getChannel;
    private on;
    onItemMetadataUpdated: (collectionSlug: string, callback: Callback<ItemMetadataUpdate>) => () => void;
    onItemCancelled: (collectionSlug: string, callback: Callback<ItemCancelledEvent>) => () => void;
    onItemListed: (collectionSlug: string, callback: Callback<ItemListedEvent>) => () => void;
    onItemSold: (collectionSlug: string, callback: Callback<ItemSoldEvent>) => () => void;
    onItemTransferred: (collectionSlug: string, callback: Callback<ItemTransferredEvent>) => () => void;
    onItemReceivedOffer: (collectionSlug: string, callback: Callback<ItemReceivedOfferEvent>) => () => void;
    onItemReceivedBid: (collectionSlug: string, callback: Callback<ItemReceivedBidEvent>) => () => void;
    onEvents: (collectionSlug: string, eventTypes: EventType[], callback: Callback<BaseStreamMessage<unknown>>) => () => void;
}
