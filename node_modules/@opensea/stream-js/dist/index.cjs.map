{"version":3,"file":"index.cjs","sources":["../src/types.ts","../src/constants.ts","../src/client.ts","../src/helpers.ts"],"sourcesContent":["import type { SocketConnectOption } from 'phoenix';\n\n/**\n * OpenSea Stream API configuration object\n * @param token API key to use for API\n * @param network `Network` type to use. Defaults to `Network.MAINNET`\n * @param apiUrl Optional base URL to use for the API.\n * @param connectOptions `SocketConnectOption` type to use to connect to the Stream API socket.\n * @param onError a callback function to use whenever errors occur in the SDK.\n * @param logLevel `LogLevel` type to define the amount of logging the SDK should provide.\n */\nexport type ClientConfig = {\n  network?: Network;\n  apiUrl?: string;\n  token: string;\n  connectOptions?: Partial<SocketConnectOption>;\n  onError?: (error: unknown) => void;\n  logLevel?: LogLevel;\n};\n\nexport enum Network {\n  MAINNET = 'mainnet',\n  TESTNET = 'testnet'\n}\n\nexport enum EventType {\n  ITEM_METADATA_UPDATED = 'item_metadata_updated',\n  ITEM_LISTED = 'item_listed',\n  ITEM_SOLD = 'item_sold',\n  ITEM_TRANSFERRED = 'item_transferred',\n  ITEM_RECEIVED_OFFER = 'item_received_offer',\n  ITEM_RECEIVED_BID = 'item_received_bid',\n  ITEM_CANCELLED = 'item_cancelled'\n}\n\nexport type BaseItemType = {\n  nft_id: string;\n  permalink: string;\n  metadata: BaseItemMetadataType;\n  chain: {\n    name: string;\n  };\n};\n\nexport type Payload = {\n  item: BaseItemType;\n  collection: {\n    slug: string;\n  };\n};\n\nexport type BaseStreamMessage<Payload> = {\n  event_type: string;\n  sent_at: string;\n  payload: Payload;\n};\n\nexport type Trait = {\n  trait_type: string;\n  value: string;\n  display_type: string;\n  max_value: number;\n  trait_count: string;\n  order: number;\n};\n\nexport interface BaseItemMetadataType extends Payload {\n  name: string;\n  image_url: string;\n  animation_url: string;\n  metadata_url: string;\n}\n\nexport interface ItemMetadataUpdatePayload extends BaseItemMetadataType {\n  description: string;\n  background_color: string;\n  traits: [Trait];\n}\nexport type ItemMetadataUpdate = BaseStreamMessage<ItemMetadataUpdatePayload>;\n\nexport type Account = {\n  address: string;\n};\n\nexport type PaymentToken = {\n  address: string;\n  decimals: number;\n  eth_price: string;\n  name: string;\n  symbol: string;\n  usd_price: string;\n};\n\nexport interface ItemListedEventPayload extends Payload {\n  quantity: number;\n  listing_type: string;\n  listing_date: string;\n  expiration_date: string;\n  maker: Account;\n  taker: Account;\n  base_price: string;\n  payment_token: PaymentToken;\n  is_private: boolean;\n  event_timestamp: string;\n}\n\nexport type ItemListedEvent = BaseStreamMessage<ItemListedEventPayload>;\n\nexport type Transaction = {\n  hash: string;\n  timestamp: string;\n};\n\nexport interface ItemSoldEventPayload extends Payload {\n  quantity: number;\n  listing_type: string;\n  closing_date: string;\n  transaction: Transaction;\n  maker: Account;\n  taker: Account;\n  sale_price: string;\n  payment_token: PaymentToken;\n  is_private: boolean;\n  event_timestamp: string;\n}\n\nexport type ItemSoldEvent = BaseStreamMessage<ItemSoldEventPayload>;\n\nexport interface ItemTransferredEventPayload extends Payload {\n  from_account: Account;\n  quantity: number;\n  to_account: Account;\n  transaction: Transaction;\n  event_timestamp: string;\n}\n\nexport type ItemTransferredEvent =\n  BaseStreamMessage<ItemTransferredEventPayload>;\n\nexport interface ItemReceivedBidEventPayload extends Payload {\n  quantity: number;\n  created_date: string;\n  expiration_date: string;\n  maker: Account;\n  taker: Account;\n  base_price: string;\n  payment_token: PaymentToken;\n  event_timestamp: string;\n}\n\nexport type ItemReceivedBidEvent =\n  BaseStreamMessage<ItemReceivedBidEventPayload>;\n\nexport interface ItemReceivedOfferEventPayload extends Payload {\n  quantity: number;\n  created_date: string;\n  expiration_date: string;\n  maker: Account;\n  taker: Account;\n  base_price: string;\n  payment_token: PaymentToken;\n  event_timestamp: string;\n}\n\nexport type ItemReceivedOfferEvent =\n  BaseStreamMessage<ItemReceivedOfferEventPayload>;\n\nexport interface ItemCancelledEventPayload extends Payload {\n  quantity: number;\n  listing_type: string;\n  transaction: Transaction;\n  payment_token: PaymentToken;\n  event_timestamp: string;\n}\n\nexport type ItemCancelledEvent = BaseStreamMessage<ItemCancelledEventPayload>;\n\nexport type Callback<Event> = (event: Event) => unknown;\n\nexport enum LogLevel {\n  DEBUG = 20,\n  INFO = 30,\n  WARN = 40,\n  ERROR = 50\n}\n","import { Network } from './types';\n\nexport const ENDPOINTS = {\n  [Network.MAINNET]: 'wss://stream.openseabeta.com/socket',\n  [Network.TESTNET]: 'wss://testnets-stream.openseabeta.com/socket'\n};\n","import { Socket, Channel } from 'phoenix';\nimport { collectionTopic } from './helpers';\nimport {\n  ClientConfig,\n  BaseStreamMessage,\n  EventType,\n  ItemMetadataUpdate,\n  ItemListedEvent,\n  ItemSoldEvent,\n  ItemTransferredEvent,\n  ItemReceivedBidEvent,\n  ItemReceivedOfferEvent,\n  ItemCancelledEvent,\n  Callback,\n  LogLevel,\n  Network\n} from './types';\nimport { ENDPOINTS } from './constants';\n\nexport class OpenSeaStreamClient {\n  private socket: Socket;\n  private channels: Map<string, Channel>;\n  private logLevel: LogLevel;\n\n  constructor({\n    network = Network.MAINNET,\n    token,\n    apiUrl,\n    connectOptions,\n    logLevel = LogLevel.INFO,\n    onError = (error) => this.error(error)\n  }: ClientConfig) {\n    const endpoint = apiUrl || ENDPOINTS[network];\n    const webTransportDefault =\n      typeof window !== 'undefined' ? window.WebSocket : undefined;\n    this.socket = new Socket(endpoint, {\n      params: { token },\n      transport: webTransportDefault,\n      ...connectOptions\n    });\n\n    this.socket.onError(onError);\n    this.channels = new Map<string, Channel>();\n    this.logLevel = logLevel;\n  }\n\n  private debug(message: unknown) {\n    if (this.logLevel <= LogLevel.DEBUG) {\n      console.debug(`[DEBUG]: ${message}`);\n    }\n  }\n\n  private info(message: unknown) {\n    if (this.logLevel <= LogLevel.INFO) {\n      console.info(`[INFO]: ${message}`);\n    }\n  }\n\n  private warn(message: unknown) {\n    if (this.logLevel <= LogLevel.WARN) {\n      console.warn(`[WARN]: ${message}`);\n    }\n  }\n\n  private error(message: unknown) {\n    if (this.logLevel <= LogLevel.ERROR) {\n      console.error(`[ERROR]: ${message}`);\n    }\n  }\n\n  public connect = () => {\n    this.debug('Connecting to socket');\n    this.socket.connect();\n  };\n\n  public disconnect = (\n    callback = () => this.info(`Succesfully disconnected from socket`)\n  ) => {\n    this.channels.clear();\n    return this.socket.disconnect(callback);\n  };\n\n  private createChannel = (topic: string): Channel => {\n    const channel = this.socket.channel(topic);\n    channel\n      .join()\n      .receive('ok', () => this.info(`Successfully joined channel \"${topic}\"`))\n      .receive('error', () => this.error(`Failed to join channel \"${topic}\"`));\n\n    this.channels.set(topic, channel);\n    return channel;\n  };\n\n  private getChannel = (topic: string): Channel => {\n    let channel = this.channels.get(topic);\n    if (!channel) {\n      this.debug(`Creating channel for topic: \"${topic}\"`);\n      channel = this.createChannel(topic);\n    }\n    return channel;\n  };\n\n  private on = <Payload, Event extends BaseStreamMessage<Payload>>(\n    eventType: EventType,\n    collectionSlug: string,\n    callback: Callback<Event>\n  ) => {\n    this.socket.connect();\n\n    const topic = collectionTopic(collectionSlug);\n    this.debug(`Fetching channel ${topic}`);\n    const channel = this.getChannel(topic);\n    this.debug(`Subscribing to ${eventType} events on ${topic}`);\n    channel.on(eventType, callback);\n    return () => {\n      this.debug(`Unsubscribing from ${eventType} events on ${topic}`);\n      channel.leave().receive('ok', () => {\n        this.channels.delete(topic);\n        this.info(\n          `Succesfully left channel \"${topic}\" listening for ${eventType}`\n        );\n      });\n    };\n  };\n\n  public onItemMetadataUpdated = (\n    collectionSlug: string,\n    callback: Callback<ItemMetadataUpdate>\n  ) => {\n    this.debug(`Listening for item metadata updates on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_METADATA_UPDATED, collectionSlug, callback);\n  };\n\n  public onItemCancelled = (\n    collectionSlug: string,\n    callback: Callback<ItemCancelledEvent>\n  ) => {\n    this.debug(`Listening for item cancellations on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_CANCELLED, collectionSlug, callback);\n  };\n\n  public onItemListed = (\n    collectionSlug: string,\n    callback: Callback<ItemListedEvent>\n  ) => {\n    this.debug(`Listening for item listings on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_LISTED, collectionSlug, callback);\n  };\n\n  public onItemSold = (\n    collectionSlug: string,\n    callback: Callback<ItemSoldEvent>\n  ) => {\n    this.debug(`Listening for item sales on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_SOLD, collectionSlug, callback);\n  };\n\n  public onItemTransferred = (\n    collectionSlug: string,\n    callback: Callback<ItemTransferredEvent>\n  ) => {\n    this.debug(`Listening for item transfers on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_TRANSFERRED, collectionSlug, callback);\n  };\n\n  public onItemReceivedOffer = (\n    collectionSlug: string,\n    callback: Callback<ItemReceivedOfferEvent>\n  ) => {\n    this.debug(`Listening for item offers on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_RECEIVED_OFFER, collectionSlug, callback);\n  };\n\n  public onItemReceivedBid = (\n    collectionSlug: string,\n    callback: Callback<ItemReceivedBidEvent>\n  ) => {\n    this.debug(`Listening for item bids on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_RECEIVED_BID, collectionSlug, callback);\n  };\n\n  public onEvents = (\n    collectionSlug: string,\n    eventTypes: EventType[],\n    callback: Callback<BaseStreamMessage<unknown>>\n  ) => {\n    const subscriptions = eventTypes.map((eventType) =>\n      this.on(eventType, collectionSlug, callback)\n    );\n\n    return () => {\n      for (const unsubscribe of subscriptions) {\n        unsubscribe();\n      }\n    };\n  };\n}\n","export const collectionTopic = (slug: string) => {\n  return `collection:${slug}`;\n};\n"],"names":["Network","EventType","LogLevel","ENDPOINTS","MAINNET","TESTNET","_ENDPOINTS","OpenSeaStreamClient","_ref","network","_ref$network","token","apiUrl","connectOptions","_ref$logLevel","logLevel","INFO","onError","_ref$onError","error","_this","this","socket","channels","connect","debug","disconnect","callback","info","clear","createChannel","topic","channel","join","receive","set","getChannel","get","on","eventType","collectionSlug","leave","onItemMetadataUpdated","ITEM_METADATA_UPDATED","onItemCancelled","ITEM_CANCELLED","onItemListed","ITEM_LISTED","onItemSold","ITEM_SOLD","onItemTransferred","ITEM_TRANSFERRED","onItemReceivedOffer","ITEM_RECEIVED_OFFER","onItemReceivedBid","ITEM_RECEIVED_BID","onEvents","eventTypes","subscriptions","map","unsubscribe","webTransportDefault","window","WebSocket","undefined","Socket","params","transport","Map","message","DEBUG","console","warn","WARN","ERROR"],"mappings":"IAoBYA,EAKAC,EA0JAC,mVA/JAF,QAAAA,aAAAA,GAAAA,EAAAA,QAAOA,UAAPA,QAAOA,QAGlB,KAFC,QAAA,UACAA,EAAA,QAAA,UAGUC,QAAAA,eAAAA,GAAAA,EAAAA,QAAAA,YAAAA,QAAAA,UAQX,KAPC,sBAAA,wBACAA,EAAA,YAAA,cACAA,EAAA,UAAA,YACAA,EAAA,iBAAA,mBACAA,EAAA,oBAAA,sBACAA,EAAA,kBAAA,oBACAA,EAAA,eAAA,iBAmJUC,yBAAAA,EAAAA,mBAAAA,QAAAA,SAKX,KAJCA,EAAA,MAAA,IAAA,QACAA,EAAAA,EAAA,KAAA,IAAA,OACAA,EAAAA,EAAA,KAAA,IAAA,OACAA,EAAAA,EAAA,MAAA,IAAA,QCrLWC,IAAAA,IACVH,EAAAA,IAAAA,QAAAA,QAAQI,SAAU,sCAClBJ,EAAAA,QAAOA,QAACK,SAAU,+CAFdC,4CCsBL,WAAA,SAAAC,EAAAC,kBACEC,QAAAA,OAAUT,IAAAA,EAAAA,QAAOA,QAACI,QAMLM,EALbC,EAAAA,EAAAA,MACAC,EAIaJ,EAJbI,OACAC,IAAAA,eAGaC,EAAAN,EAFbO,SAAAA,aAAWb,QAAQA,SAACc,KACpBC,EAAAA,EAAAA,EAAAA,QAAAA,OACa,IAAAC,EADH,SAACC,GAAD,OAAWC,EAAKD,MAAMA,IACnBD,EAAAG,KAXPC,YACAC,EAAAA,KAAAA,qBACAR,cASO,EAAAM,KAuCRG,QAAU,WACfJ,EAAKK,MAAM,wBACXL,EAAKE,OAAOE,WAzCCH,KA4CRK,WAAa,SAClBC,GAGA,YAHAA,IAAAA,IAAAA,EAAW,WAAM,OAAAP,EAAKQ,+CAEtBR,EAAKG,SAASM,QACPT,EAAKE,OAAOI,WAAWC,IAhDjBN,KAmDPS,cAAgB,SAACC,GACvB,IAAMC,EAAUZ,EAAKE,OAAOU,QAAQD,GAOpC,OANAC,EACGC,OACAC,QAAQ,KAAM,kBAAMd,EAAKQ,KAAL,gCAA0CG,EAAhD,OACdG,QAAQ,QAAS,WAAA,OAAMd,EAAKD,MAAiCY,2BAAAA,SAEhEX,EAAKG,SAASY,IAAIJ,EAAOC,GAClBA,GA3DMX,KA8DPe,WAAa,SAACL,GACpB,IAAIC,EAAUZ,EAAKG,SAASc,IAAIN,GAKhC,OAJKC,IACHZ,EAAKK,sCAAsCM,EAA3C,KACAC,EAAUZ,EAAKU,cAAcC,IAExBC,GAGDM,KAAAA,GAAK,SACXC,EACAC,EACAb,GAEAP,EAAKE,OAAOE,UAEZ,IAAMO,EC5GR,cD4GgCS,EAC9BpB,EAAKK,0BAA0BM,GAC/B,IAAMC,EAAUZ,EAAKgB,WAAWL,GAGhC,OAFAX,EAAKK,MAAL,kBAA6Bc,EAAuBR,cAAAA,GACpDC,EAAQM,GAAGC,EAAWZ,GACV,WACVP,EAAKK,4BAA4Bc,EAAjC,cAAwDR,GACxDC,EAAQS,QAAQP,QAAQ,KAAM,WAC5Bd,EAAKG,gBAAgBQ,GACrBX,EAAKQ,kCAC0BG,EAD/B,mBACuDQ,YAMtDG,sBAAwB,SAC7BF,EACAb,GAGA,OADAP,EAAKK,iDAAiDe,EAAtD,KACOpB,EAAKkB,GAAGrC,QAASA,UAAC0C,sBAAuBH,EAAgBb,SAG3DiB,gBAAkB,SACvBJ,EACAb,GAGA,OADAP,EAAKK,MAAL,wCAAmDe,EACnD,KAAOpB,EAAKkB,GAAGrC,QAASA,UAAC4C,eAAgBL,EAAgBb,IA3G5CN,KA8GRyB,aAAe,SACpBN,EACAb,GAGA,OADAP,EAAKK,MAAL,mCAA8Ce,EAC9C,KAAOpB,EAAKkB,GAAGrC,QAAAA,UAAU8C,YAAaP,EAAgBb,IAnHzCN,KAsHR2B,WAAa,SAClBR,EACAb,GAGA,OADAP,EAAKK,MAAL,gCAA2Ce,EAC3C,KAAOpB,EAAKkB,GAAGrC,QAAAA,UAAUgD,UAAWT,EAAgBb,IA3HvCN,KA8HR6B,kBAAoB,SACzBV,EACAb,GAGA,OADAP,EAAKK,MAAL,oCAA+Ce,EAC/C,KAAOpB,EAAKkB,GAAGrC,QAAAA,UAAUkD,iBAAkBX,EAAgBb,IAnI9CN,KAsIR+B,oBAAsB,SAC3BZ,EACAb,GAGA,OADAP,EAAKK,MAAL,iCAA4Ce,EAC5C,KAAOpB,EAAKkB,GAAGrC,QAAAA,UAAUoD,oBAAqBb,EAAgBb,IA3IjDN,KA8IRiC,kBAAoB,SACzBd,EACAb,GAGA,OADAP,EAAKK,MAAL,+BAA0Ce,EAC1C,KAAOpB,EAAKkB,GAAGrC,QAASA,UAACsD,kBAAmBf,EAAgBb,IAnJ/CN,KAsJRmC,SAAW,SAChBhB,EACAiB,EACA9B,GAEA,IAAM+B,EAAgBD,EAAWE,IAAI,SAACpB,GAAD,OACnCnB,EAAKkB,GAAGC,EAAWC,EAAgBb,KAGrC,OAAO,WACL,IAA0B+B,MAAAA,2qBAAAA,CAAAA,mBACxBE,EAAAA,EAAAA,WAhKJ,IACMC,EACc,oBAAXC,OAAyBA,OAAOC,eAAYC,EACrD3C,KAAKC,OAAS,IAAI2C,EAAJA,OAHGrD,GAAUT,EAAUM,GAInCyD,EAAAA,CAAAA,OAAQ,CAAEvD,MAAAA,GACVwD,UAAWN,GACRhD,IAGLQ,KAAKC,OAAOL,QAAQA,GACpBI,KAAKE,SAAW,IAAI6C,IACpB/C,KAAKN,SAAWA,EAxBpB,kBAAA,SA2BUU,MAAA,SAAM4C,GACRhD,KAAKN,UAAYb,QAAAA,SAASoE,OAC5BC,QAAQ9C,MAAkB4C,YAAAA,MAItBzC,KAAA,SAAKyC,GACPhD,KAAKN,UAAYb,QAAQA,SAACc,MAC5BuD,QAAQ3C,KAAgByC,WAAAA,MAIpBG,KAAA,SAAKH,GACPhD,KAAKN,UAAYb,QAAQA,SAACuE,MAC5BF,QAAQC,KAAgBH,WAAAA,MAIpBlD,MAAA,SAAMkD,GACRhD,KAAKN,UAAYb,QAAQA,SAACwE,OAC5BH,QAAQpD,MAAkBkD,YAAAA,IA/ChC9D,EAKE"}